# open Julia

# type following
using LinearAlgebra, SparseArrays, VMLS

# also type
using Plots

# create a vector
x = [-1.1, 0.0, 3.6, -7.2]

# get length of the vector
length(x)

# another way to create a vector
y = [-1.1; 0.0; 3.6; -7.2]
# 4-element Vector{Float64}:

# it also shows that the elements of the vector are float64 type
# It also shows the length or number of elements

# above are column vectors
# if we remove comma or semicolon, it forms a row vector
a = [-1.1 0.0 3.6]
# 1Ã—3 Matrix{Float64}:

# create a tuple
b = (1,2)


# indexing
x[3] # this produces 3.6

# assigning
x[3] = 4.0 # the new value is 4.0

# use semicolon at the end of the statement to supress the output

# get the last element
x[end]
x[length(x)]


# assignment vs copy
# assignment (both vectors change after the assignment of any one)
y = x
# after this if we change x or elements of x, then y will change
# the converse is also true
x = [ -1.1, 0.0, 3.6, -7.2 ];
y = x;
x[3]=4.0 # here both x and y vector change

# copy one vector to another

# here changing the element of will not change the elements of y
x = [ -1.1, 0.0, 3.6, -7.2 ];
y = copy(x)
x[3]=4.0 # here only x changes
y[1]=2.0 # only y changes, no change in x

# check equality of vectors
x = [ -1.1, 0.0, 3.6, -7.2 ];
y = copy(x) # we copy here
y[3] = 4.0
y==x
z=x # we assign here
z==x
z[3]=4.0
z==x

# [1.3] and 1.3 are not same. the former is a vector and the later is a scalar

# Julia index starts at 1
x = [1.3]
x[1]

# block or stacked vector
x = [1,2];
y = [1,1,2];
z = [x,y]; # array of vectors, similar to list or tuple
z = (x,y); # list or tuple
z = [x;y]; # vector of stacked elements of x and y (concatenation)
z = vcat(x,y) # another way of (concatenation)

# reassign a range of values for a vector
x = [ 9, 4, 3, 0, 5 ];
y = x[2:4];
x[4:5] = [ -2, -3 ]; # we change x here but corresponding y will not change
x 









